
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.RecipeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  cuisine: 'cuisine',
  timeMinutes: 'timeMinutes',
  costEstimate: 'costEstimate',
  dietTags: 'dietTags',
  skillLevel: 'skillLevel',
  sidePairs: 'sidePairs',
  flavor: 'flavor',
  createdById: 'createdById'
};

exports.Prisma.IngredientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  groups: 'groups',
  aliases: 'aliases'
};

exports.Prisma.IngredientUseScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  ingredientId: 'ingredientId',
  qty: 'qty',
  unit: 'unit',
  optional: 'optional',
  isKeystone: 'isKeystone'
};

exports.Prisma.StepScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  index: 'index',
  text: 'text',
  timersSec: 'timersSec'
};

exports.Prisma.QuirkScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  stepIndex: 'stepIndex',
  text: 'text',
  tags: 'tags',
  authorId: 'authorId',
  upvotes: 'upvotes'
};

exports.Prisma.CuisineDNAScalarFieldEnum = {
  cuisine: 'cuisine',
  aromatics: 'aromatics',
  baseSpices: 'baseSpices',
  staples: 'staples',
  techniques: 'techniques',
  subsGraphJson: 'subsGraphJson'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Recipe: 'Recipe',
  Ingredient: 'Ingredient',
  IngredientUse: 'IngredientUse',
  Step: 'Step',
  Quirk: 'Quirk',
  CuisineDNA: 'CuisineDNA'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\MIHIKA\\OneDrive\\Documents\\GitHub\\Pantry-to-Plate\\apps\\server\\prisma\\generated\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\MIHIKA\\OneDrive\\Documents\\GitHub\\Pantry-to-Plate\\apps\\server\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../..",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../prisma/generated/client\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Recipe {\n  id           String  @id @default(cuid())\n  title        String\n  cuisine      String\n  timeMinutes  Int\n  costEstimate Int?\n  dietTags     Json // [\"vegetarian\",\"vegan\"]\n  skillLevel   Int\n  sidePairs    Json // [\"jeera rice\",\"raita\"]\n  flavor       Json // {heat, sweet, sour, umami, bitter}\n  createdById  String?\n\n  ingredients IngredientUse[]\n  steps       Step[]\n  quirks      Quirk[]\n\n  @@index([cuisine])\n}\n\nmodel Ingredient {\n  id      String          @id @default(cuid())\n  name    String          @unique\n  groups  Json // [\"spice\",\"aromatic\",\"protein\",...]\n  aliases Json // [\"chickpea\",\"garbanzo\"]\n  uses    IngredientUse[]\n}\n\nmodel IngredientUse {\n  id           String  @id @default(cuid())\n  recipeId     String\n  ingredientId String\n  qty          Float?\n  unit         String?\n  optional     Boolean @default(false)\n  isKeystone   Boolean @default(false)\n\n  recipe     Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)\n  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)\n}\n\nmodel Step {\n  id        String @id @default(cuid())\n  recipeId  String\n  index     Int\n  text      String\n  timersSec Int?\n\n  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)\n\n  @@unique([recipeId, index])\n}\n\nmodel Quirk {\n  id        String  @id @default(cuid())\n  recipeId  String\n  stepIndex Int?\n  text      String\n  tags      Json // [\"substitution\",\"timing\",\"tip\"]\n  authorId  String?\n  upvotes   Int     @default(0)\n\n  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)\n}\n\nmodel CuisineDNA {\n  cuisine       String @id\n  aromatics     Json // [\"onion\",\"ginger\",\"garlic\"]\n  baseSpices    Json // [\"cumin\",\"coriander\",\"turmeric\"]\n  staples       Json // [\"rice\",\"atta\",\"ghee\"]\n  techniques    Json // [\"tempering\",\"slow-simmer\"]\n  subsGraphJson Json // { yogurt: { coconut_milk_plus_lemon: 0.6 }, ... }\n}\n",
  "inlineSchemaHash": "c38cc79ce7ab8413d33911dc022dd2552ca5acd4e655c1a1a233f1c8a8ef0eb6",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Recipe\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cuisine\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timeMinutes\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"costEstimate\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"dietTags\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"skillLevel\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sidePairs\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"flavor\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdById\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ingredients\",\"kind\":\"object\",\"type\":\"IngredientUse\",\"relationName\":\"IngredientUseToRecipe\"},{\"name\":\"steps\",\"kind\":\"object\",\"type\":\"Step\",\"relationName\":\"RecipeToStep\"},{\"name\":\"quirks\",\"kind\":\"object\",\"type\":\"Quirk\",\"relationName\":\"QuirkToRecipe\"}],\"dbName\":null},\"Ingredient\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"groups\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"aliases\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"uses\",\"kind\":\"object\",\"type\":\"IngredientUse\",\"relationName\":\"IngredientToIngredientUse\"}],\"dbName\":null},\"IngredientUse\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"recipeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ingredientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"qty\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"unit\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"optional\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isKeystone\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"recipe\",\"kind\":\"object\",\"type\":\"Recipe\",\"relationName\":\"IngredientUseToRecipe\"},{\"name\":\"ingredient\",\"kind\":\"object\",\"type\":\"Ingredient\",\"relationName\":\"IngredientToIngredientUse\"}],\"dbName\":null},\"Step\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"recipeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"index\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timersSec\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"recipe\",\"kind\":\"object\",\"type\":\"Recipe\",\"relationName\":\"RecipeToStep\"}],\"dbName\":null},\"Quirk\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"recipeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stepIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"upvotes\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"recipe\",\"kind\":\"object\",\"type\":\"Recipe\",\"relationName\":\"QuirkToRecipe\"}],\"dbName\":null},\"CuisineDNA\":{\"fields\":[{\"name\":\"cuisine\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"aromatics\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"baseSpices\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"staples\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"techniques\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"subsGraphJson\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

